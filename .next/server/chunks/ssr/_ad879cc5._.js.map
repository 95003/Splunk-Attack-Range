{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://K%3A/SoftMania/Github/Splunk-Attack-Range/app/page.tsx"],"sourcesContent":["\"use client\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Home() {\r\n  const [server, setServer] = useState(\"\");\r\n  const [attackType, setAttackType] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const serverOptions = [\"windows\", \"linux\", \"others\"];\r\n  const attackOptions = [\"T1071.001\", \"T1059.003\", \"T1027.002\", \"T1003.006\"];\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      console.log(\"Sending:\", { instance_id: server, attack_id: attackType });\r\n\r\n      const res = await fetch(\r\n        process.env.NEXT_PUBLIC_API_URL as string, // âœ… use env\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ server_type: server, attack_id: attackType }),\r\n        }\r\n      );\r\n\r\n      const textResponse = await res.text();\r\n      console.log(\"Response:\", textResponse);\r\n\r\n      setStatus(res.ok ? \"success\" : `fail - ${res.status}`);\r\n    } catch (error) {\r\n      console.error(\"Network Error:\", error);\r\n      setStatus(\"fail - network error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n        background: \"#f7f9fc\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          background: \"white\",\r\n          padding: \"30px\",\r\n          borderRadius: \"10px\",\r\n          boxShadow: \"0 4px 8px rgba(0,0,0,0.1)\",\r\n          width: \"350px\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <h2\r\n          style={{ fontSize: \"24px\", fontWeight: \"bold\", marginBottom: \"20px\" }}\r\n        >\r\n          Attack Range API\r\n        </h2>\r\n\r\n        {/* Server Dropdown */}\r\n        <select\r\n          value={server}\r\n          onChange={(e) => setServer(e.target.value)}\r\n          style={{\r\n            width: \"100%\",\r\n            padding: \"10px\",\r\n            borderRadius: \"5px\",\r\n            border: \"1px solid #ccc\",\r\n            marginBottom: \"15px\",\r\n          }}\r\n        >\r\n          <option value=\"\">Select Server Name</option>\r\n          {serverOptions.map((srv) => (\r\n            <option key={srv} value={srv}>\r\n              {srv}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        {/* Attack Type Dropdown */}\r\n        <select\r\n          value={attackType}\r\n          onChange={(e) => setAttackType(e.target.value)}\r\n          style={{\r\n            width: \"100%\",\r\n            padding: \"10px\",\r\n            borderRadius: \"5px\",\r\n            border: \"1px solid #ccc\",\r\n            marginBottom: \"15px\",\r\n          }}\r\n        >\r\n          <option value=\"\">Select Attack Type</option>\r\n          {attackOptions.map((atk) => (\r\n            <option key={atk} value={atk}>\r\n              {atk}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <button\r\n          onClick={handleSubmit}\r\n          style={{\r\n            background: \"#2563eb\",\r\n            color: \"white\",\r\n            padding: \"10px\",\r\n            border: \"none\",\r\n            borderRadius: \"5px\",\r\n            cursor: \"pointer\",\r\n            width: \"100%\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          Send\r\n        </button>\r\n\r\n        {status && (\r\n          <p\r\n            style={{\r\n              marginTop: \"15px\",\r\n              fontWeight: \"bold\",\r\n              color: status.includes(\"success\") ? \"green\" : \"red\",\r\n            }}\r\n          >\r\n            {status === \"success\"\r\n              ? \"Request Successful!\"\r\n              : `Request Failed: ${status}`}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AADA;;;AAGe,SAAS;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAErC,MAAM,gBAAgB;QAAC;QAAW;QAAS;KAAS;IACpD,MAAM,gBAAgB;QAAC;QAAa;QAAa;QAAa;KAAY;IAE1E,MAAM,eAAe;QACnB,IAAI;YACF,QAAQ,GAAG,CAAC,YAAY;gBAAE,aAAa;gBAAQ,WAAW;YAAW;YAErE,MAAM,MAAM,MAAM,+GAEhB;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE,aAAa;oBAAQ,WAAW;gBAAW;YACpE;YAGF,MAAM,eAAe,MAAM,IAAI,IAAI;YACnC,QAAQ,GAAG,CAAC,aAAa;YAEzB,UAAU,IAAI,EAAE,GAAG,YAAY,CAAC,OAAO,EAAE,IAAI,MAAM,EAAE;QACvD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kBAAkB;YAChC,UAAU;QACZ;IACF;IAEA,qBACE,8OAAC;QACC,OAAO;YACL,SAAS;YACT,gBAAgB;YAChB,YAAY;YACZ,QAAQ;YACR,YAAY;QACd;kBAEA,cAAA,8OAAC;YACC,OAAO;gBACL,YAAY;gBACZ,SAAS;gBACT,cAAc;gBACd,WAAW;gBACX,OAAO;gBACP,WAAW;YACb;;8BAEA,8OAAC;oBACC,OAAO;wBAAE,UAAU;wBAAQ,YAAY;wBAAQ,cAAc;oBAAO;8BACrE;;;;;;8BAKD,8OAAC;oBACC,OAAO;oBACP,UAAU,CAAC,IAAM,UAAU,EAAE,MAAM,CAAC,KAAK;oBACzC,OAAO;wBACL,OAAO;wBACP,SAAS;wBACT,cAAc;wBACd,QAAQ;wBACR,cAAc;oBAChB;;sCAEA,8OAAC;4BAAO,OAAM;sCAAG;;;;;;wBAChB,cAAc,GAAG,CAAC,CAAC,oBAClB,8OAAC;gCAAiB,OAAO;0CACtB;+BADU;;;;;;;;;;;8BAOjB,8OAAC;oBACC,OAAO;oBACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK;oBAC7C,OAAO;wBACL,OAAO;wBACP,SAAS;wBACT,cAAc;wBACd,QAAQ;wBACR,cAAc;oBAChB;;sCAEA,8OAAC;4BAAO,OAAM;sCAAG;;;;;;wBAChB,cAAc,GAAG,CAAC,CAAC,oBAClB,8OAAC;gCAAiB,OAAO;0CACtB;+BADU;;;;;;;;;;;8BAMjB,8OAAC;oBACC,SAAS;oBACT,OAAO;wBACL,YAAY;wBACZ,OAAO;wBACP,SAAS;wBACT,QAAQ;wBACR,cAAc;wBACd,QAAQ;wBACR,OAAO;wBACP,YAAY;oBACd;8BACD;;;;;;gBAIA,wBACC,8OAAC;oBACC,OAAO;wBACL,WAAW;wBACX,YAAY;wBACZ,OAAO,OAAO,QAAQ,CAAC,aAAa,UAAU;oBAChD;8BAEC,WAAW,YACR,wBACA,CAAC,gBAAgB,EAAE,QAAQ;;;;;;;;;;;;;;;;;AAM3C","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file://K%3A/SoftMania/Github/Splunk-Attack-Range/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}}]
}